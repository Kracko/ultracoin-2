# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
USE_UPNP:=-
USE_IPV6:=1
USE_LEVELDB:=0

DEFS=-DBOOST_SPIRIT_THREADSAFE

BOOST_INCLUDE_PATH=/android/arm-gcc-4.6/include
BOOST_LIB_PATH=/android/arm-gcc-4.6/lib
BDB_INCLUDE_PATH=/android/arm-gcc-4.6/include
BDB_LIB_PATH=/android/arm-gcc-4.6/lib
OPENSSL_INCLUDE_PATH=/android/arm-gcc-4.6/include
OPENSSL_LIB_PATH=/android/arm-gcc-4.6/lib
BOOST_LIB_SUFFIX=-gcc-mt-1_53

APP := ultracoind
ROOT := /android
INSTALL_DIR := /data/tmp
NDK_PLATFORM_VER := 14
NDK_ROOT := $(ROOT)/android-ndk-r8e
NDK_HOST := darwin-x86_64
SDK_ROOT := $(ROOT)/android-sdk-linux
TOOLCHAIN=arm-linux-androideabi-4.6
PREBUILD := $(NDK_ROOT)/toolchains/$(TOOLCHAIN)/prebuilt/$(NDK_HOST)
STLBASE := $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.6

BIN := $(PREBUILD)/bin
LIB := $(NDK_ROOT)/platforms/android-$(NDK_PLATFORM_VER)/arch-arm/usr/lib
SYSROOT :=  $(NDK_ROOT)/platforms/android-$(NDK_PLATFORM_VER)/arch-arm
INCLUDES = -I$(NDK_ROOT)/platforms/android-$(NDK_PLATFORM_VER)/arch-arm/usr/include \

#LOCAL_C_INCLUDES := $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.6/include
#LOCAL_C_INCLUDES += $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include
LOCAL_LDLIBS += $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/libgnustl_static.a

CC := $(BIN)/arm-linux-androideabi-gcc
LD := $(BIN)/arm-linux-androideabi-ld
AR := $(BIN)/arm-linux-androideabi-ar
STRIP := $(BIN)/arm-linux-androideabi-strip

CXX := $(BIN)/arm-linux-androideabi-g++
RANLIB := $(BIN)/arm-linux-androideabi-ranlib
LINK:=$(CXX)

#LIBCRT := $(LIB)/crtbegin_dynamic.o

LDFLAGS := -L$(LIB) -L$(STLBASE)/lib $(LOCAL_LDLIBS)
LINKER := /system/bin/linker

CFLAGS := $(DEBUG) -fno-short-enums $(INCLUDES) -DNDK --sysroot $(SYSROOT) $(LOCAL_C_INCLUDES)
LDLAGS += -Wl,-rpath-link=$(LIB),-dynamic-linker=$(LINKER) $(LDFLAGS)
CXXFLAGS := $(CFLAGS)


DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH) /android/android-ndk-r8e/sources/cxx-stl/gnu-libstdc++/4.6/include /android/android-ndk-r8e/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi/include /android/include /android/android-ndk-r8e/platforms/android-14/arch-arm/usr/include) 
LIBS += $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH)) -l$(LOCAL_LDLIBS)

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

LMODE = dynamic
LMODE2 = dynamic

ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
else
	TESTDEFS += -DBOOST_TEST_DYN_LINK
endif

# for boost 1.37, add -mt to the boost libraries
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto 

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS+= -Wl,-B$(LMODE2) -ldl


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2
#


DEBUGFLAGS=-g

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
#xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
#    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)
xCXXFLAGS=-O2 -pthread $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)


# scrypt-jane specific parameters
DEFS+=-DSCRYPT_KECCAK512 -DSCRYPT_CHACHA -DSCRYPT_CHOOSE_COMPILETIME -DCPU_USE_INTRINSICS -DSCRYPT_CHOOSE_COMPILETIME

xCXXFLAGS_SCRYPT_JANE=-O3 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)
    
# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
    obj/ifaddrs.o \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/bloom.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt_mine.o \
    obj/scrypt-jane.o

ifeq (LEVELDB,1)
OBJS += leveldb/libleveldb.a
endif


all: ultracoind

#
# LevelDB support
#
ifeq (USE_LEVELDB, 1)
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a 
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include) -DUSE_LEVELDB
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(xCXXFLAGS)" libleveldb.a libmemenv.a && cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a
else
OBJS += obj/txdb-bdb.o
endif

test check: test_ultracoin FORCE
	./test_ultracoin

# auto-generated dependencies:
-include obj/*.P
-include obj-test/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/ifaddrs.o: ifaddrs.c
	$(CC) -c $(xCXXFLAGS_SCRYPT_JANE) -MMD -o $@ $<

obj/scrypt-jane.o: scrypt-jane/scrypt-jane.c
	$(CC) -c $(xCXXFLAGS_SCRYPT_JANE) -MMD -o $@ $<

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

$(APP): $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

test_ultracoin: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ -Wl,-B$(LMODE) -lboost_unit_test_framework $(xLDFLAGS) $(LIBS)

clean:
	-rm -f ultracoind test_ultracoin
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h

install: $(APP)
	$(SDK_ROOT)/platform-tools/adb push $(APP) $(INSTALL_DIR)/$(APP) 
	$(SDK_ROOT)/platform-tools/adb shell chmod 777 $(INSTALL_DIR)/$(APP)

run:
	$(SDK_ROOT)/platform-tools/adb push $(APP) $(INSTALL_DIR)/$(APP) 
	$(SDK_ROOT)/platform-tools/adb shell chmod 777 $(INSTALL_DIR)/$(APP)

strip:
	$(STRIP) ultracoind

FORCE:
